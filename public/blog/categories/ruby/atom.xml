<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | Ryan Ringler]]></title>
  <link href="http://ryanringler.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://ryanringler.com/"/>
  <updated>2017-11-26T11:28:04-08:00</updated>
  <id>http://ryanringler.com/</id>
  <author>
    <name><![CDATA[Ryan Ringler]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RVM, Ruby 1.9.3, and OSX 10.10]]></title>
    <link href="http://ryanringler.com/blog/2014/11/18/rvm-ruby-and-osx/"/>
    <updated>2014-11-18T20:58:57-08:00</updated>
    <id>http://ryanringler.com/blog/2014/11/18/rvm-ruby-and-osx</id>
    <content type="html"><![CDATA[<p>%p
  Ugg.  For the past four or five days, I&rsquo;ve been struggling to get all my gems
  installed for a Ruby 1.9.3 project I&rsquo;ve been helping on (which is annoying
  because everything was working fine the last time I worked on it.)  I use RVM
  to manage my ruby versions, and for the longest time I&rsquo;ve let it manage its
  dependencies by itself.  RVM seems to prefer using Homebrew&rsquo;s gcc compiler,
  which has never been a problem in the past, but seems to be having some
  difficulty finding source files in OSX 10.10.  I don&rsquo;t know if the files got
  moved in the 10.10 update, but I do know it&rsquo;s causing me some headaches.</p>

<p>%p
  Running:</p>

<p>  {% codeblock lang:bash %}
  $> bundle update
  {% endcodeblock %}</p>

<p>%p
  was giving me a build error:</p>

<p>  {% codeblock lang:bash %}
  Fetching gem metadata from <a href="https://rubygems.org/........">https://rubygems.org/........</a>
  Fetching additional metadata from <a href="https://rubygems.org/..">https://rubygems.org/..</a>
  Resolving dependencies&hellip;</p>

<p>  Gem::Ext::BuildError: ERROR: Failed to build gem native extension.</p>

<pre><code>  /Users/rringler/.rvm/rubies/ruby-1.9.3-p551/bin/ruby -r ./siteconf20141118-1331-708ezv.rb extconf.rb
</code></pre>

<p>  checking for dns_sd.h&hellip; no
  unable to find dnssd header
  <strong><em> extconf.rb failed </em></strong>
  Could not create Makefile due to some reason, probably lack of
  necessary libraries and/or headers.  Check the mkmf.log file for more
  details.  You may need configuration options.</p>

<p>  {% endcodeblock %}</p>

<p>%p
  Inspecting the mkmf.log, I see that ruby/rvm is trying to use the homebrew&rsquo;s
  gcc compiler (/usr/local/opt/apple-gcc42) to build the dnssd gem, and failing
  to find the dns_sd.h headers.  I have no idea why Homebrew&rsquo;s gcc can&rsquo;t find
  it, but I do seem to have a solution: reinstall Ruby 1.9.3 using Xcode&rsquo;s gcc
  compiler.</p>

<p>%p
  After uninstalling the existing Ruby 1.9.3</p>

<p>  {% codeblock lang:bash %}
  $> rvm uninstall ruby-1.9.3-p551
  {% endcodeblock %}</p>

<p>%p
  I made sure I had the latest version of Xcode, and Xcode Command Line Tools
  installed.  I opened Xcode&rsquo;s preferences, and verified that it listed &ldquo;Xcode
  6.1 (6A1052d)&rdquo; in the Command Line Tools section (under the Locations tab.)
  Finally, I reinstalled ruby instructing RVM to use Xcode&rsquo;s clang-based gcc
  compiler:</p>

<p>  {% codeblock lang:bash %}
  $> rvm install 1.9.3 &ndash;with-gcc=clang
  {% endcodeblock %}</p>

<p>%p
  and everything seems to work again; the dnssd gem now builds correctly.</p>

<p>%p
  Apparently earlier versions of Ruby 1.9.3 had issues with clang/llvm-based
  compilers, so this solution may not help if you&rsquo;re trying to
  install something earlier than ruby-1.9.3-p125, but if you just want the
  latest 1.9.3 (p551) and are having difficulty, give this a shot.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Enumerable's #each_with_object Loves You]]></title>
    <link href="http://ryanringler.com/blog/2014/11/01/enumerables-number-each-with-object-loves-you/"/>
    <updated>2014-11-01T21:46:20-07:00</updated>
    <id>http://ryanringler.com/blog/2014/11/01/enumerables-number-each-with-object-loves-you</id>
    <content type="html"><![CDATA[<p>%p
  Ruby&rsquo;s Enumerable module is beautiful.  Coming from a more procedural
  programming background, it can take some time to fully appreciate that beauty.
  One pattern I see new Rubyists repeating relates to transforming data
  structures.  This is an easy problem for a proceduralist:</p>

<p>{% codeblock lang:ruby %}
def some_method(collection)
  array = []</p>

<p>  collection.each do |item|
    new_item = item.do_something
    array &lt;&lt; new_item
  end</p>

<p>  array
end
{% endcodeblock %}</p>

<p>%p
  This works, but it&rsquo;s not beautiful.  It&rsquo;s even worse if the proceduralist
  loops over the data to transform.  Once the proceduralist embraces Ruby, and
  studies the Enumerable module, they learn of the #each_with_object method.
  This method allows us to simplify our code:</p>

<p>{% codeblock lang:ruby %}
def some_method(collection)
  collection.each_with_object([]) do |item, array|
    array &lt;&lt; item.do_something
  end
end
{% endcodeblock %}</p>

<p>%p
  Enumerable#each_with_object allows us to declare the new data structure as a
  parameter, reference it in our block, and then returns it for us; all in one
  method call.  For simple operations, this can often be a one-liner:</p>

<p>{% codeblock lang:ruby %}
def some_method(collection)
  collection.each_with_object([]) { |item, array| array &lt;&lt; item.do_something }
end
{% endcodeblock %}</p>

<p>%p
  This is beautiful.  Any time you find yourself instantiating a
  new data structure and then filling it, consider using #each_with_object.</p>
]]></content>
  </entry>
  
</feed>
