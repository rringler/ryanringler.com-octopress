<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby on Rails | Ryan&nbsp;Ringler.com]]></title>
  <link href="http://ryanringler.com/blog/categories/ruby-on-rails/atom.xml" rel="self"/>
  <link href="http://ryanringler.com/"/>
  <updated>2014-11-10T00:00:40-08:00</updated>
  <id>http://ryanringler.com/</id>
  <author>
    <name><![CDATA[Ryan Ringler]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Generating a New Rails Secret Key]]></title>
    <link href="http://ryanringler.com/blog/2014/07/20/generating-rails-secret-keys/"/>
    <updated>2014-07-20T14:34:02-07:00</updated>
    <id>http://ryanringler.com/blog/2014/07/20/generating-rails-secret-keys</id>
    <content type="html"><![CDATA[<p>%p
  Ruby on Rails takes care of most of our site security for us.  About the only
  thing we have to do is be careful with our secret keys.  This means keeping
  them out of public repos.  If you realize you&rsquo;ve revealed your secret key,
  Rails still has your back.  There&rsquo;s a very simple rake task to generate a
  new secret key:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rake secret
</span><span class='line'>d781e04897092465&amp;hellip;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>%p
  and you&rsquo;ll get a new, secure 64-character random key.  Try not to check this
  one into source control.</p>

<p>%p
  H/T to
  %a{href: &ldquo;<a href="http://www.jamesbadger.ca/2012/12/18/generate-new-secret-token/">http://www.jamesbadger.ca/2012/12/18/generate-new-secret-token/</a>&rdquo;} James Badger&rsquo;s post
  for spelling this out.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ActiveRecord: Decimal Datatype and its options]]></title>
    <link href="http://ryanringler.com/blog/2014/06/23/activerecord-decimal-datatype-and-its-options/"/>
    <updated>2014-06-23T18:01:58-07:00</updated>
    <id>http://ryanringler.com/blog/2014/06/23/activerecord-decimal-datatype-and-its-options</id>
    <content type="html"><![CDATA[<p>%p
  Ruby on Rails&rsquo;s ActiveRecord supports the normal decimal SQL data type, with
  support for both precision and scale options.  Unfortunately these two options
  are simple enough to understand, but similar enough to confuse.</p>

<p>%p
  In short, precision is the total number of digits in the decimal number,
  while scale is the number of digits to the right of the decimal place.  Thus,
  the following migration:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">CreateNumbersTable</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Migration</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">up</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;create_table :numbers do |t|</span>
</span><span class='line'><span class="sr">  t.decimal :decimal_number, precision: 6, scale: 2</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">down</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>%p
  creates a numbers table with a
  %strong</p>

<pre><code>decimal_number
</code></pre>

<p>  column that will accept data in a X,XXX.XX format.  Try to insert a number
  with more digits (say, 10,000.00) and it will give you an out-of-range error
  (as I wrestled with last night.)</p>

<p>%p
  H/T to
  %a{href: &ldquo;<a href="https://www.jtanium.com/2009/10/06/rails-migrations-decimal-precision-and-scale/">https://www.jtanium.com/2009/10/06/rails-migrations-decimal-precision-and-scale/</a>&rdquo;} Jtanium&rsquo;s post
  for making this clear for me.</p>
]]></content>
  </entry>
  
</feed>
