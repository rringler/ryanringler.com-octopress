<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Enumerable | Ryan Ringler]]></title>
  <link href="http://ryanringler.com/blog/categories/enumerable/atom.xml" rel="self"/>
  <link href="http://ryanringler.com/"/>
  <updated>2017-11-26T11:28:04-08:00</updated>
  <id>http://ryanringler.com/</id>
  <author>
    <name><![CDATA[Ryan Ringler]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Enumerable's #each_with_object Loves You]]></title>
    <link href="http://ryanringler.com/blog/2014/11/01/enumerables-number-each-with-object-loves-you/"/>
    <updated>2014-11-01T21:46:20-07:00</updated>
    <id>http://ryanringler.com/blog/2014/11/01/enumerables-number-each-with-object-loves-you</id>
    <content type="html"><![CDATA[<p>%p
  Ruby&rsquo;s Enumerable module is beautiful.  Coming from a more procedural
  programming background, it can take some time to fully appreciate that beauty.
  One pattern I see new Rubyists repeating relates to transforming data
  structures.  This is an easy problem for a proceduralist:</p>

<p>{% codeblock lang:ruby %}
def some_method(collection)
  array = []</p>

<p>  collection.each do |item|
    new_item = item.do_something
    array &lt;&lt; new_item
  end</p>

<p>  array
end
{% endcodeblock %}</p>

<p>%p
  This works, but it&rsquo;s not beautiful.  It&rsquo;s even worse if the proceduralist
  loops over the data to transform.  Once the proceduralist embraces Ruby, and
  studies the Enumerable module, they learn of the #each_with_object method.
  This method allows us to simplify our code:</p>

<p>{% codeblock lang:ruby %}
def some_method(collection)
  collection.each_with_object([]) do |item, array|
    array &lt;&lt; item.do_something
  end
end
{% endcodeblock %}</p>

<p>%p
  Enumerable#each_with_object allows us to declare the new data structure as a
  parameter, reference it in our block, and then returns it for us; all in one
  method call.  For simple operations, this can often be a one-liner:</p>

<p>{% codeblock lang:ruby %}
def some_method(collection)
  collection.each_with_object([]) { |item, array| array &lt;&lt; item.do_something }
end
{% endcodeblock %}</p>

<p>%p
  This is beautiful.  Any time you find yourself instantiating a
  new data structure and then filling it, consider using #each_with_object.</p>
]]></content>
  </entry>
  
</feed>
