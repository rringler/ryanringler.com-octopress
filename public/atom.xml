<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Ryan Ringler.com]]></title>
  <link href="http://ryanringler.com/atom.xml" rel="self"/>
  <link href="http://ryanringler.com/"/>
  <updated>2014-10-07T22:29:37-07:00</updated>
  <id>http://ryanringler.com/</id>
  <author>
    <name><![CDATA[Ryan Ringler]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Fixed-Height Carousel for Twitter Bootstrap]]></title>
    <link href="http://ryanringler.com/blog/2014/08/24/fixed-height-carousel-for-twitter-bootstrap/"/>
    <updated>2014-08-24T20:08:41-07:00</updated>
    <id>http://ryanringler.com/blog/2014/08/24/fixed-height-carousel-for-twitter-bootstrap</id>
    <content type="html"><![CDATA[<p>
  Twitter Bootstrap is awesome.  The amount of grunt work that Bootstrap makes
  easy is amazing.  One of Bootstrap&#8217;s great features is animated carousels;
  they are a nice way to display a lot of information without taking up a lot of
  vertical height.  With Bootstrap, we just wrap our content in a couple of
  divs, and before we know it we have a nice scolling carousel.
</p>
<p>
  One thing that I don&#8217;t like about Bootstrap&#8217;s carousel implementation is that
  it dynamically resizes the carousel&#8217;s height based on the size of the content
  currently being displaying.  If all your content is exactly the same height
  this isn&#8217;t such a big deal, but if it&#8217;s not you end up with page elements
  below the carousel jumping around as the carousel resizes.  This seems like
  terrible UX to me.
</p>
<p>
  Thankfully this is not all that difficult to fix.  In just a few lines of
  JavaScript/jQuery, we can scan through the carousel slides and determine the
  height of the tallest slide, and use its height for all of them.  The code is
  pretty straightforward:
</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">carouselNormalization</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">items</span>   <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#carousel-id .item&#39;</span><span class="p">),</span>              <span class="c1">// grab all the slides</span>
</span><span class='line'>      <span class="nx">heights</span> <span class="o">=</span> <span class="p">[],</span>                                   <span class="c1">// array to store heights</span>
</span><span class='line'>      <span class="nx">tallest</span><span class="p">;</span>                                        <span class="c1">// tallest slide</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">items</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">normalizeHeights</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">items</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">heights</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">height</span><span class="p">());</span>               <span class="c1">// add each slide&#39;s height</span>
</span><span class='line'>      <span class="p">});</span>                                             <span class="c1">// to the array</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">tallest</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">heights</span><span class="p">);</span>        <span class="c1">// find the largest height</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">items</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">css</span><span class="p">(</span><span class="s1">&#39;min-height&#39;</span><span class="p">,</span> <span class="nx">tallest</span> <span class="o">+</span> <span class="s1">&#39;px&#39;</span><span class="p">);</span>    <span class="c1">// set each slide&#39;s minimum</span>
</span><span class='line'>      <span class="p">});</span>                                             <span class="c1">// height to the largest</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">normalizeHeights</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="nb">window</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;resize orientationchange&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">tallest</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">heights</span><span class="p">.</span><span class="nx">length</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>               <span class="c1">// reset the variables</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">items</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">css</span><span class="p">(</span><span class="s1">&#39;min-height&#39;</span><span class="p">,</span> <span class="s1">&#39;0&#39;</span><span class="p">);</span>              <span class="c1">// reset each slide&#39;s height</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">normalizeHeights</span><span class="p">();</span>                            <span class="c1">// run it again</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
<p>
  Call that in a document.ready block:
</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;document&#39;</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">carouselNormalization</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>
<p>
  and your page elements will stop jumping around.
</p>
<p>
  H/T to
  <a href='https://coderwall.com/p/uf2pka'>Eddie Staples&#8217;s post</a>
  for providing the basic JavaScript.
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Generating a New Rails Secret Key]]></title>
    <link href="http://ryanringler.com/blog/2014/07/20/generating-rails-secret-keys/"/>
    <updated>2014-07-20T14:34:02-07:00</updated>
    <id>http://ryanringler.com/blog/2014/07/20/generating-rails-secret-keys</id>
    <content type="html"><![CDATA[<p>
  Ruby on Rails takes care of most of our site security for us.  About the only
  thing we have to do is be careful with our secret keys.  This means keeping
  them out of public repos.  If you realize you&#8217;ve revealed your secret key,
  Rails still has your back.  There&#8217;s a very simple rake task to generate a
  new secret key:
</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rake secret
</span><span class='line'>d781e04897092465...
</span></code></pre></td></tr></table></div></figure>
<p>
  and you&#8217;ll get a new, secure 64-character random key.  Try not to check this
  one into source control.
</p>
<p>
  H/T to
  <a href='http://www.jamesbadger.ca/2012/12/18/generate-new-secret-token/'>James Badger&#8217;s post</a>
  for spelling this out.
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ActiveRecord: Decimal Datatype and its options]]></title>
    <link href="http://ryanringler.com/blog/2014/06/23/activerecord-decimal-datatype-and-its-options/"/>
    <updated>2014-06-23T18:01:58-07:00</updated>
    <id>http://ryanringler.com/blog/2014/06/23/activerecord-decimal-datatype-and-its-options</id>
    <content type="html"><![CDATA[<p>
  Ruby on Rails&#8217;s ActiveRecord supports the normal decimal SQL data type, with
  support for both precision and scale options.  Unfortunately these two options
  are simple enough to understand, but similar enough to confuse.
</p>
<p>
  In short, precision is the total number of digits in the decimal number,
  while scale is the number of digits to the right of the decimal place.  Thus,
  the following migration:
</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">CreateNumbersTable</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Migration</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">up</span>
</span><span class='line'>    <span class="n">create_table</span> <span class="ss">:numbers</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">decimal</span> <span class="ss">:decimal_number</span><span class="p">,</span> <span class="ss">precision</span><span class="p">:</span> <span class="mi">6</span><span class="p">,</span> <span class="ss">scale</span><span class="p">:</span> <span class="mi">2</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">down</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>
<p>
  creates a numbers table with a
  <strong>
    decimal_number
  </strong>
  column that will accept data in a X,XXX.XX format.  Try to insert a number
  with more digits (say, 10,000.00) and it will give you an out-of-range error
  (as I wrestled with last night.)
</p>
<p>
  H/T to
  <a href='https://www.jtanium.com/2009/10/06/rails-migrations-decimal-precision-and-scale/'>Jtanium&#8217;s post</a>
  for making this clear for me.
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World.rb]]></title>
    <link href="http://ryanringler.com/blog/2014/03/08/hello-world-dot-rb/"/>
    <updated>2014-03-08T11:49:34-08:00</updated>
    <id>http://ryanringler.com/blog/2014/03/08/hello-world-dot-rb</id>
    <content type="html"><![CDATA[<p>
  First post.
</p>
]]></content>
  </entry>
  
</feed>
