<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Ryan&nbsp;Ringler.com]]></title>
  <link href="http://ryanringler.com/atom.xml" rel="self"/>
  <link href="http://ryanringler.com/"/>
  <updated>2016-07-03T14:57:13-07:00</updated>
  <id>http://ryanringler.com/</id>
  <author>
    <name><![CDATA[Ryan Ringler]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RVM, Ruby 1.9.3, and OSX 10.10]]></title>
    <link href="http://ryanringler.com/blog/2014/11/18/rvm-ruby-and-osx/"/>
    <updated>2014-11-18T20:58:57-08:00</updated>
    <id>http://ryanringler.com/blog/2014/11/18/rvm-ruby-and-osx</id>
    <content type="html"><![CDATA[<p>
  Ugg.  For the past four or five days, I&#8217;ve been struggling to get all my gems
  installed for a Ruby 1.9.3 project I&#8217;ve been helping on (which is annoying
  because everything was working fine the last time I worked on it.)  I use RVM
  to manage my ruby versions, and for the longest time I&#8217;ve let it manage its
  dependencies by itself.  RVM seems to prefer using Homebrew&#8217;s gcc compiler,
  which has never been a problem in the past, but seems to be having some
  difficulty finding source files in OSX 10.10.  I don&#8217;t know if the files got
  moved in the 10.10 update, but I do know it&#8217;s causing me some headaches.
</p>
<p>
  Running:
  <figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</p>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>  <span class="nv">$&gt;</span> bundle update
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>
<p>
  was giving me a build error:
  <figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</p>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>  Fetching gem metadata from https://rubygems.org/........
</span><span class='line'>  Fetching additional metadata from https://rubygems.org/..
</span><span class='line'>  Resolving dependencies...
</span><span class='line'>
</span><span class='line'>  Gem::Ext::BuildError: ERROR: Failed to build gem native extension.
</span><span class='line'>
</span><span class='line'>      /Users/rringler/.rvm/rubies/ruby-1.9.3-p551/bin/ruby -r ./siteconf20141118-1331-708ezv.rb extconf.rb
</span><span class='line'>  checking <span class="k">for </span>dns_sd.h... no
</span><span class='line'>  unable to find dnssd header
</span><span class='line'>  *** extconf.rb failed ***
</span><span class='line'>  Could not create Makefile due to some reason, probably lack of
</span><span class='line'>  necessary libraries and/or headers.  Check the mkmf.log file <span class="k">for </span>more
</span><span class='line'>  details.  You may need configuration options.
</span><span class='line'>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>
<p>
  Inspecting the mkmf.log, I see that ruby/rvm is trying to use the homebrew&#8217;s
  gcc compiler (/usr/local/opt/apple-gcc42) to build the dnssd gem, and failing
  to find the dns_sd.h headers.  I have no idea why Homebrew&#8217;s gcc can&#8217;t find
  it, but I do seem to have a solution: reinstall Ruby 1.9.3 using Xcode&#8217;s gcc
  compiler.
</p>
<p>
  After uninstalling the existing Ruby 1.9.3
  <figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</p>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>  <span class="nv">$&gt;</span> rvm uninstall ruby-1.9.3-p551
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>
<p>
  I made sure I had the latest version of Xcode, and Xcode Command Line Tools
  installed.  I opened Xcode&#8217;s preferences, and verified that it listed &#8220;Xcode
  6.1 (6A1052d)&#8221; in the Command Line Tools section (under the Locations tab.)
  Finally, I reinstalled ruby instructing RVM to use Xcode&#8217;s clang-based gcc
  compiler:
  <figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</p>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>  <span class="nv">$&gt;</span> rvm install 1.9.3 --with-gcc<span class="o">=</span>clang
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>
<p>
  and everything seems to work again; the dnssd gem now builds correctly.
</p>
<p>
  Apparently earlier versions of Ruby 1.9.3 had issues with clang/llvm-based
  compilers, so this solution may not help if you&#8217;re trying to
  install something earlier than ruby-1.9.3-p125, but if you just want the
  latest 1.9.3 (p551) and are having difficulty, give this a shot.
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Enumerable's #each_with_object Loves You]]></title>
    <link href="http://ryanringler.com/blog/2014/11/01/enumerables-number-each-with-object-loves-you/"/>
    <updated>2014-11-01T21:46:20-07:00</updated>
    <id>http://ryanringler.com/blog/2014/11/01/enumerables-number-each-with-object-loves-you</id>
    <content type="html"><![CDATA[<p>
  Ruby&#8217;s Enumerable module is beautiful.  Coming from a more procedural
  programming background, it can take some time to fully appreciate that beauty.
  One pattern I see new Rubyists repeating relates to transforming data
  structures.  This is an easy problem for a proceduralist:
</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">some_method</span><span class="p">(</span><span class="n">collection</span><span class="p">)</span>
</span><span class='line'>  <span class="n">array</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">collection</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">item</span><span class="o">|</span>
</span><span class='line'>    <span class="n">new_item</span> <span class="o">=</span> <span class="n">item</span><span class="o">.</span><span class="n">do_something</span>
</span><span class='line'>    <span class="n">array</span> <span class="o">&lt;&lt;</span> <span class="n">new_item</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">array</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>
<p>
  This works, but it&#8217;s not beautiful.  It&#8217;s even worse if the proceduralist
  loops over the data to transform.  Once the proceduralist embraces Ruby, and
  studies the Enumerable module, they learn of the #each_with_object method.
  This method allows us to simplify our code:
</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">some_method</span><span class="p">(</span><span class="n">collection</span><span class="p">)</span>
</span><span class='line'>  <span class="n">collection</span><span class="o">.</span><span class="n">each_with_object</span><span class="p">(</span><span class="o">[]</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">item</span><span class="p">,</span> <span class="n">array</span><span class="o">|</span>
</span><span class='line'>    <span class="n">array</span> <span class="o">&lt;&lt;</span> <span class="n">item</span><span class="o">.</span><span class="n">do_something</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>
<p>
  Enumerable#each_with_object allows us to declare the new data structure as a
  parameter, reference it in our block, and then returns it for us; all in one
  method call.  For simple operations, this can often be a one-liner:
</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">some_method</span><span class="p">(</span><span class="n">collection</span><span class="p">)</span>
</span><span class='line'>  <span class="n">collection</span><span class="o">.</span><span class="n">each_with_object</span><span class="p">(</span><span class="o">[]</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">item</span><span class="p">,</span> <span class="n">array</span><span class="o">|</span> <span class="n">array</span> <span class="o">&lt;&lt;</span> <span class="n">item</span><span class="o">.</span><span class="n">do_something</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>
<p>
  This is beautiful.  Any time you find yourself instantiating a
  new data structure and then filling it, consider using #each_with_object.
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fixed-Height Carousel for Twitter Bootstrap]]></title>
    <link href="http://ryanringler.com/blog/2014/08/24/fixed-height-carousel-for-twitter-bootstrap/"/>
    <updated>2014-08-24T20:08:41-07:00</updated>
    <id>http://ryanringler.com/blog/2014/08/24/fixed-height-carousel-for-twitter-bootstrap</id>
    <content type="html"><![CDATA[<p>
  Twitter Bootstrap is awesome.  The amount of grunt work that Bootstrap makes
  easy is amazing.  One of Bootstrap&#8217;s great features is animated carousels;
  they are a nice way to display a lot of information without taking up a lot of
  vertical height.  With Bootstrap, we just wrap our content in a couple of
  divs, and before we know it we have a nice scolling carousel.
</p>
<p>
  One thing that I don&#8217;t like about Bootstrap&#8217;s carousel implementation is that
  it dynamically resizes the carousel&#8217;s height based on the size of the content
  currently being displaying.  If all your content is exactly the same height
  this isn&#8217;t such a big deal, but if it&#8217;s not you end up with page elements
  below the carousel jumping around as the carousel resizes.  This seems like
  terrible UX to me.
</p>
<p>
  Thankfully this is not all that difficult to fix.  In just a few lines of
  JavaScript/jQuery, we can scan through the carousel slides and determine the
  height of the tallest slide, and use its height for all of them.  The code is
  pretty straightforward:
</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">carouselNormalization</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">items</span>   <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#carousel-id .item&#39;</span><span class="p">),</span>              <span class="c1">// grab all the slides</span>
</span><span class='line'>      <span class="nx">heights</span> <span class="o">=</span> <span class="p">[],</span>                                   <span class="c1">// array to store heights</span>
</span><span class='line'>      <span class="nx">tallest</span><span class="p">;</span>                                        <span class="c1">// tallest slide</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">items</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">normalizeHeights</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">items</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">heights</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">height</span><span class="p">());</span>               <span class="c1">// add each slide&#39;s height</span>
</span><span class='line'>      <span class="p">});</span>                                             <span class="c1">// to the array</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">tallest</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">heights</span><span class="p">);</span>        <span class="c1">// find the largest height</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">items</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">css</span><span class="p">(</span><span class="s1">&#39;min-height&#39;</span><span class="p">,</span> <span class="nx">tallest</span> <span class="o">+</span> <span class="s1">&#39;px&#39;</span><span class="p">);</span>    <span class="c1">// set each slide&#39;s minimum</span>
</span><span class='line'>      <span class="p">});</span>                                             <span class="c1">// height to the largest</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">normalizeHeights</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="nb">window</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;resize orientationchange&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">tallest</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">heights</span><span class="p">.</span><span class="nx">length</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>               <span class="c1">// reset the variables</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">items</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">css</span><span class="p">(</span><span class="s1">&#39;min-height&#39;</span><span class="p">,</span> <span class="s1">&#39;0&#39;</span><span class="p">);</span>              <span class="c1">// reset each slide&#39;s height</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">normalizeHeights</span><span class="p">();</span>                            <span class="c1">// run it again</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
<p>
  Call that in a document.ready block:
</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;document&#39;</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">carouselNormalization</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>
<p>
  and your page elements will stop jumping around.
</p>
<p>
  H/T to
  <a href='https://coderwall.com/p/uf2pka'>Eddie Staples&#8217;s post</a>
  for providing the basic JavaScript.
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Generating a New Rails Secret Key]]></title>
    <link href="http://ryanringler.com/blog/2014/07/20/generating-rails-secret-keys/"/>
    <updated>2014-07-20T14:34:02-07:00</updated>
    <id>http://ryanringler.com/blog/2014/07/20/generating-rails-secret-keys</id>
    <content type="html"><![CDATA[<p>
  Ruby on Rails takes care of most of our site security for us.  About the only
  thing we have to do is be careful with our secret keys.  This means keeping
  them out of public repos.  If you realize you&#8217;ve revealed your secret key,
  Rails still has your back.  There&#8217;s a very simple rake task to generate a
  new secret key:
</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rake secret
</span><span class='line'>d781e04897092465...
</span></code></pre></td></tr></table></div></figure>
<p>
  and you&#8217;ll get a new, secure 64-character random key.  Try not to check this
  one into source control.
</p>
<p>
  H/T to
  <a href='http://www.jamesbadger.ca/2012/12/18/generate-new-secret-token/'>James Badger&#8217;s post</a>
  for spelling this out.
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ActiveRecord: Decimal Datatype and its options]]></title>
    <link href="http://ryanringler.com/blog/2014/06/23/activerecord-decimal-datatype-and-its-options/"/>
    <updated>2014-06-23T18:01:58-07:00</updated>
    <id>http://ryanringler.com/blog/2014/06/23/activerecord-decimal-datatype-and-its-options</id>
    <content type="html"><![CDATA[<p>
  Ruby on Rails&#8217;s ActiveRecord supports the normal decimal SQL data type, with
  support for both precision and scale options.  Unfortunately these two options
  are simple enough to understand, but similar enough to confuse.
</p>
<p>
  In short, precision is the total number of digits in the decimal number,
  while scale is the number of digits to the right of the decimal place.  Thus,
  the following migration:
</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">CreateNumbersTable</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Migration</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">up</span>
</span><span class='line'>    <span class="n">create_table</span> <span class="ss">:numbers</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">decimal</span> <span class="ss">:decimal_number</span><span class="p">,</span> <span class="ss">precision</span><span class="p">:</span> <span class="mi">6</span><span class="p">,</span> <span class="ss">scale</span><span class="p">:</span> <span class="mi">2</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">down</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>
<p>
  creates a numbers table with a
  <strong>
    decimal_number
  </strong>
  column that will accept data in a X,XXX.XX format.  Try to insert a number
  with more digits (say, 10,000.00) and it will give you an out-of-range error
  (as I wrestled with last night.)
</p>
<p>
  H/T to
  <a href='https://www.jtanium.com/2009/10/06/rails-migrations-decimal-precision-and-scale/'>Jtanium&#8217;s post</a>
  for making this clear for me.
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World.rb]]></title>
    <link href="http://ryanringler.com/blog/2014/03/08/hello-world-dot-rb/"/>
    <updated>2014-03-08T11:49:34-08:00</updated>
    <id>http://ryanringler.com/blog/2014/03/08/hello-world-dot-rb</id>
    <content type="html"><![CDATA[<p>
  First post.
</p>
]]></content>
  </entry>
  
</feed>
